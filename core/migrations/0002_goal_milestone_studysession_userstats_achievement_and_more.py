# Generated by Django 5.2.4 on 2025-09-01 08:27

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('academic', 'Academic'), ('skill', 'Skill Development'), ('career', 'Career'), ('personal', 'Personal Growth'), ('health', 'Health & Fitness'), ('creative', 'Creative'), ('other', 'Other')], max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('not_started', 'Not Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('paused', 'Paused'), ('cancelled', 'Cancelled')], default='not_started', max_length=20)),
                ('target_date', models.DateField(blank=True, null=True)),
                ('progress_percentage', models.PositiveIntegerField(default=0, help_text='0-100')),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Milestone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_completed', models.BooleanField(default=False)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='milestones', to='core.goal')),
            ],
            options={
                'ordering': ['due_date', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='StudySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.CharField(choices=[('math', 'Mathematics'), ('science', 'Science'), ('physics', 'Physics'), ('chemistry', 'Chemistry'), ('biology', 'Biology'), ('computer_science', 'Computer Science'), ('programming', 'Programming'), ('english', 'English'), ('history', 'History'), ('geography', 'Geography'), ('economics', 'Economics'), ('psychology', 'Psychology'), ('philosophy', 'Philosophy'), ('engineering', 'Engineering'), ('other', 'Other')], max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('productivity_rating', models.PositiveIntegerField(default=5, help_text='1-10 scale')),
                ('notes', models.TextField(blank=True)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('goals_related', models.ManyToManyField(blank=True, related_name='study_sessions', to='core.goal')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='study_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_study_hours', models.FloatField(default=0.0)),
                ('total_goals_completed', models.PositiveIntegerField(default=0)),
                ('current_streak_days', models.PositiveIntegerField(default=0)),
                ('longest_streak_days', models.PositiveIntegerField(default=0)),
                ('total_questions_asked', models.PositiveIntegerField(default=0)),
                ('total_answers_given', models.PositiveIntegerField(default=0)),
                ('total_success_stories', models.PositiveIntegerField(default=0)),
                ('achievement_points', models.PositiveIntegerField(default=0)),
                ('last_activity_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='stats', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Statistics',
                'verbose_name_plural': 'User Statistics',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('achievement_type', models.CharField(choices=[('goal_completed', 'Goal Completed'), ('streak', 'Study Streak'), ('milestone', 'Milestone Reached'), ('participation', 'Community Participation'), ('helping_others', 'Helping Others'), ('consistency', 'Consistency'), ('improvement', 'Improvement'), ('special', 'Special Achievement')], max_length=20)),
                ('icon', models.CharField(default='üèÜ', max_length=10)),
                ('points', models.PositiveIntegerField(default=10)),
                ('is_earned', models.BooleanField(default=True)),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
                ('related_goal', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.goal')),
            ],
            options={
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'title', 'achievement_type')},
            },
        ),
        migrations.CreateModel(
            name='WeeklyGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('week_start', models.DateField()),
                ('target_study_hours', models.FloatField(default=10.0)),
                ('target_sessions', models.PositiveIntegerField(default=5)),
                ('actual_study_hours', models.FloatField(default=0.0)),
                ('actual_sessions', models.PositiveIntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='weekly_goals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-week_start'],
                'unique_together': {('user', 'week_start')},
            },
        ),
    ]
